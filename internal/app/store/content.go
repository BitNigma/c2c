package store

import (
	"encoding/base64"
	"encoding/json"
	"errors"
	"log"
	"net/http"
	"time"
)

const (
	Base = "http://yandex.ru/"
)

var Urls = map[string]string{
	"/":         "en",
	"about":     "en",
	"contatcs":  "en",
	"wallet":    "en",
	"messenger": "en",
	"exchange":  "en",
	"testpage":  "en",
}

type Autogenerated struct {
	Meta     Meta   `json:"meta"`
	Visible  string `json:"visible"`
	Sections []Sec  `json:"sections"`
	Template string `json:"template"`
}

type Sec struct {
	Name    string `json:"name"`
	Content string `json:"content"`
}
type Meta struct {
	Title       string `json:"title"`
	Keywords    string `json:"keywords"`
	Description string `json:"description"`
	Lang        string `json:"lang"`
}

var myClient = &http.Client{Timeout: 10 * time.Second}

func GetJson(url string, target interface{}) error {
	resp, err := myClient.Get(url)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return errors.New("not found")

	}
	err = json.NewDecoder(resp.Body).Decode(target)
	if err != nil {
		log.Fatal(err)
	}

	return err
}

func Mapkey(path, lang string) (key string, ok bool) {
	value, ok := Urls[path]
	if !ok {
		return "", ok
	}
	return Base + path + "/" + value, ok
}

func Fill(data *Autogenerated) *Autogenerated {
	for i, content := range data.Sections {
		ensstr, err := base64.StdEncoding.DecodeString(content.Content)
		if err != nil {
			log.Fatal(err)
		}
		data.Sections[i].Content = string(ensstr)
	}
	return data
}
